import path from 'path';
import React from 'react';
import { renderToString } from 'react-dom/server';
import { ChunkExtractor } from '@loadable/server';
import { Provider } from 'react-redux'
import { default as ConnectedRouter } from '../../client/component/Router/containers/RouterContainer';
import * as config from '../../../assets/js/config/head';
import Root from '../../client/component/Root';
import createStore from '../store/createStore';
import theme from '../../../assets/js/theme';
import themeHandler from '../../../lib/handler/themeHandler';

let autoTheme = theme;

setInterval(() => {
    autoTheme = themeHandler.getTheme();
}, 3600000) // 3600000 每一小時讀一次Theme

export default async (ctx, next) => {
    //https://loadable-components.com/docs/server-side-rendering/
    // This is the stats file generated by webpack loadable plugin
    const statsFile = path.resolve('./dist/client/loadable-stats.json');
    // We create an extractor from the statsFile
    const extractor = new ChunkExtractor({ statsFile, entrypoints: ["index"] });
    // entrypoints是webpack的entry，不填預設為main，與webpack預設相同

    // Create a store and sense of history based on the current path
    const { store, history } = createStore(ctx.path);

    const jsx = extractor.collectChunks(
        <Provider store={store}>
            <ConnectedRouter history={history} basename={config.baseHref}>
                <Root autoTheme={autoTheme} />
            </ConnectedRouter>
        </Provider>
    );

    // Have to render your app first, and then you can get Tag information
    // renderToString before getScriptTags | getLinkTags | getStyleTags
    // https://github.com/gregberge/loadable-components/issues/557
    const content = renderToString(jsx);

    // You can now collect your script tags
    const scriptTags = extractor.getScriptTags(); // or extractor.getScriptElements();
    // // You can also collect your "preload/prefetch" links
    const linkTags = extractor.getLinkTags(); // or extractor.getLinkElements();
    // // And you can even collect your style tags (if you use "mini-css-extract-plugin")
    const styleTags = extractor.getStyleTags(); // or extractor.getStyleElements();

    //apple-touch-icon 轉手機App Icon
    //shortcut icon Tab Icon
    //manifest short_name App name
    const htmlString = `
      <!DOCTYPE html>
      <html>
      <head>
          <meta charset="${config.charset}" />
          <title>${config.title}</title>
          <base href="${config.baseHref}">
          <meta name="description" content="${config.description}">
          <meta name="viewport" content="${config.viewport.rwdMode}" >
          <link rel="apple-touch-icon" href="${config.appleTouchIcon}">
          <link rel="shortcut icon" href="${config.shortcutIcon}">
          <link rel="manifest" href="${config.manifest}">
          ${linkTags}
          ${styleTags}
      </head>
      <body>
          <div id="app">${content}</div>
          ${scriptTags}
      </body>
      </html>`;

    ctx.body = htmlString;

    await next();
};